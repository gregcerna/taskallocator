/* Auto-generated by genmsg_cpp for file /nishome/gcerna/ros/rosbuild_ws/taskallocator/msg/Request.msg */
#ifndef TASKALLOCATOR_MESSAGE_REQUEST_H
#define TASKALLOCATOR_MESSAGE_REQUEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace taskallocator
{
template <class ContainerAllocator>
struct Request_ {
  typedef Request_<ContainerAllocator> Type;

  Request_()
  : header()
  , taskType()
  , requestDevice()
  , startFloor(0)
  , startX(0.0)
  , startY(0.0)
  , endFloor(0)
  , endX(0.0)
  , endY(0.0)
  {
  }

  Request_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , taskType(_alloc)
  , requestDevice(_alloc)
  , startFloor(0)
  , startX(0.0)
  , startY(0.0)
  , endFloor(0)
  , endX(0.0)
  , endY(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskType_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  taskType;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _requestDevice_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  requestDevice;

  typedef uint32_t _startFloor_type;
  uint32_t startFloor;

  typedef float _startX_type;
  float startX;

  typedef float _startY_type;
  float startY;

  typedef uint32_t _endFloor_type;
  uint32_t endFloor;

  typedef float _endX_type;
  float endX;

  typedef float _endY_type;
  float endY;


  typedef boost::shared_ptr< ::taskallocator::Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::taskallocator::Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Request
typedef  ::taskallocator::Request_<std::allocator<void> > Request;

typedef boost::shared_ptr< ::taskallocator::Request> RequestPtr;
typedef boost::shared_ptr< ::taskallocator::Request const> RequestConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::taskallocator::Request_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::taskallocator::Request_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace taskallocator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::taskallocator::Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::taskallocator::Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::taskallocator::Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4679d5f95bd32f7422d990de060c5fcf";
  }

  static const char* value(const  ::taskallocator::Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4679d5f95bd32f74ULL;
  static const uint64_t static_value2 = 0x22d990de060c5fcfULL;
};

template<class ContainerAllocator>
struct DataType< ::taskallocator::Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "taskallocator/Request";
  }

  static const char* value(const  ::taskallocator::Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::taskallocator::Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
string taskType\n\
string requestDevice\n\
uint32 startFloor\n\
float32 startX\n\
float32 startY\n\
uint32 endFloor\n\
float32 endX\n\
float32 endY\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::taskallocator::Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::taskallocator::Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::taskallocator::Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::taskallocator::Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.taskType);
    stream.next(m.requestDevice);
    stream.next(m.startFloor);
    stream.next(m.startX);
    stream.next(m.startY);
    stream.next(m.endFloor);
    stream.next(m.endX);
    stream.next(m.endY);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Request_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::taskallocator::Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::taskallocator::Request_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "taskType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskType);
    s << indent << "requestDevice: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.requestDevice);
    s << indent << "startFloor: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.startFloor);
    s << indent << "startX: ";
    Printer<float>::stream(s, indent + "  ", v.startX);
    s << indent << "startY: ";
    Printer<float>::stream(s, indent + "  ", v.startY);
    s << indent << "endFloor: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.endFloor);
    s << indent << "endX: ";
    Printer<float>::stream(s, indent + "  ", v.endX);
    s << indent << "endY: ";
    Printer<float>::stream(s, indent + "  ", v.endY);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TASKALLOCATOR_MESSAGE_REQUEST_H

